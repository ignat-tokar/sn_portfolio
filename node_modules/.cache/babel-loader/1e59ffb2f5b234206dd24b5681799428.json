{"ast":null,"code":"import { authAPI, securityAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null // if null, then captcha is not required\n\n};\n\nconst authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_USER_DATA:\n    case GET_CAPTCHA_URL_SUCCESS:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getCaptchaUrlSuccess = captchaUrl => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  payload: {\n    captchaUrl\n  }\n});\nexport const getAuthUserData = () => async dispatch => {\n  let response = await authAPI.me();\n\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      login,\n      email\n    } = response.data.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe, captcha) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe, captcha);\n\n  if (response.data.resultCode === 0) {\n    // success, get auth data\n    dispatch(getAuthUserData());\n  } else {\n    if (response.data.resultCode === 10) {\n      dispatch(getCaptchaUrl());\n    }\n\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n    dispatch(stopSubmit(\"login\", {\n      _error: message\n    }));\n  }\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  const response = await securityAPI.getCaptchaUrl();\n  const captchaUrl = response.data.url;\n  dispatch(getCaptchaUrlSuccess(captchaUrl));\n};\nexport const logout = () => async dispatch => {\n  let response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n};\nexport default authReducer;","map":{"version":3,"names":["authAPI","securityAPI","stopSubmit","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","initialState","userId","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","setAuthUserData","getCaptchaUrlSuccess","getAuthUserData","dispatch","response","me","data","resultCode","id","password","rememberMe","captcha","getCaptchaUrl","message","messages","length","_error","url","logout"],"sources":["/home/ateros/Documents/sn_portfolio/src/redux/auth-reducer.js"],"sourcesContent":["import {authAPI, securityAPI} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\n\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS';\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    captchaUrl: null // if null, then captcha is not required\n};\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n        case GET_CAPTCHA_URL_SUCCESS:\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}\n\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n    type: SET_USER_DATA, payload:\n        {userId, email, login, isAuth}\n});\n\nexport const getCaptchaUrlSuccess = (captchaUrl) => ({\n    type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}\n});\n\nexport const getAuthUserData = () => async (dispatch) => {\n    let response = await authAPI.me();\n\n    if (response.data.resultCode === 0) {\n        let {id, login, email} = response.data.data;\n        dispatch(setAuthUserData(id, email, login, true));\n    }\n}\n\nexport const login = (email, password, rememberMe, captcha) => async (dispatch) => {\n    let response = await authAPI.login(email, password, rememberMe, captcha);\n    if (response.data.resultCode === 0) {\n        // success, get auth data\n        dispatch(getAuthUserData())\n    } else {\n        if (response.data.resultCode === 10) {\n            dispatch(getCaptchaUrl());\n        }\n\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n        dispatch(stopSubmit(\"login\", {_error: message}));\n    }\n}\n\nexport const getCaptchaUrl = () => async (dispatch) => {\n    const response = await securityAPI.getCaptchaUrl();\n    const captchaUrl = response.data.url;\n    dispatch(getCaptchaUrlSuccess(captchaUrl));\n}\n\n\n\nexport const logout = () => async (dispatch) => {\n    let response = await authAPI.logout();\n\n    if (response.data.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false));\n    }\n}\n\nexport default authReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}